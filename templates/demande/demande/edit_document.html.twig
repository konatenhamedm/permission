{% block page_content %}
    {% form_theme form 'widget/fields-block.html.twig' %}
    {% from '_macros/document.html.twig' import prototype_ligne_colonne %}
    <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Documents demande</h5>
        <div class="btn btn-icon btn-sm  ms-2" data-bs-dismiss="modal" aria-label="Close">
            <span class="svg-icon svg-icon-2x text-white">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="currentColor"></rect>
					<rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="currentColor"></rect>
				</svg>
            </span>
        </div>
    </div>
    {{ form_start(form, {'attr': {'role':'form', 'class': 'form'}}) }}
    <div class="modal-body">

      {#  <div id="list-ligne" data-prototype="{{ list_ligne_motif(form.motifs.vars.prototype, 1)|e }}"></div>#}
        {{ include('_includes/ajax/response.html.twig') }}


        <div class="row my-3 py-5" style="border-bottom:3px solid #000">
            <div class="form-group col-md-4">
                <label class="sr-onl" for="userinput1">Datedd debut*</label>
                {{ form_widget(form.dateDebut,{attr:{'readonly':'readonly'}}) }}</div>
            <div class="form-group col-md-4">
                <label class="sr-onl" for="userinput1">Date fin*</label>
                {{ form_widget(form.dateFin,{attr:{'readonly':'readonly'}}) }}</div>

            <div class="form-group col-md-4">
                <label class="sr-onl" for="userinput1">Nombre de jour(inclus)*</label>
                {{ form_widget(form.nbreJour,{attr:{'readonly':'readonly'}}) }}
            </div>

        </div>
        <br>
          <div class="row">
                    <h3 style="color:red">Ajouter document</h3>
                </div>
        {{ prototype_ligne_colonne(form) }}


    </div>
    <div class="modal-footer">
     {{ form_widget(form.annuler) }}
        {{ form_widget(form.save) }}
        {{ form_widget(form.document_enregister) }}
        
   </div>
    {{ form_widget(form._token) }}
    {{ form_end(form, {render_rest: false}) }}



{% endblock %}

{% block java %}
    <script>


        if($('.element').find('option:selected').attr('data-value') == "MOT1"){
            $(".enfant").show()
        }else{
            $(".enfant").hide()
        }
        if($('.element').find('option:selected').attr('data-value') == "MOT3"){
            $(".precisez").show()
        }else{
            $(".precisez").hide()
        }

        $('.dateDebut,.dateFin').on('change',function (e)  {
            var date1 = new Date($(".dateDebut").val());
            var date2 = new Date($(".dateFin").val());
            var time_diff = date2.getTime() - date1.getTime();
            // différence de jours
            var days_Diff = time_diff / (1000 * 3600 * 24);
            if((days_Diff+1).toString() == "NaN"){
                $(".nbre").val(0);
            }else {
                $(".nbre").val(days_Diff+1);
            }


        })

        $('.no-auto').each(function () {
            const $this = $(this);
            const $id = $('#' + $this.attr('id'));
            init_date_picker($id,  'down', (start, e) => {
                //$this.val(start.format('DD/MM/YYYY'));
            }, null, null, null);

            $id.on('apply.daterangepicker', function (ev, picker) {
                $(this).val(picker.startDate.format('DD/MM/YYYY'));
            });
        });

        $(function () {

            const $container = $('.row-colonne');

            var index = $container.length;


            const $addLink = $('.add_line');
            $addLink.click(function(e) {
                const $this  = $(this);
                const proto_class = $this.attr('data-protoclass');
                const name = $this.attr('data-protoname');
                const $container = $($this.attr('data-container'));

                addLine($container, name, proto_class);


                $('.element').on('change',function (e) {


                    $res = $(this).closest('.row-colonne');
                    $resultat= $(this);

                    if($resultat.find('option:selected').attr('data-value') == "MOT1"){
                        $res.find(".enfant").show()
                    }else{
                        $res.find(".enfant").hide()
                    }
                    if($resultat.find('option:selected').attr('data-value') == "MOT3"){
                        $res.find(".precisez").show()
                    }else{
                        $res.find(".precisez").hide()
                    }


                });

                e.preventDefault(); // évite qu'un # apparaisse dans l'URL
            });
            // On ajoute un premier champ automatiquement s'il n'en existe pas déjà un (cas d'une nouvelle annonce par exemple).
            /*if (index == 0) {
            addimputation($container);
            } else {*/
            if (index > 0) {
                $container.children('.row-column').each(function() {
                    const $this = $(this);
                    addDeleteLink($this);
                    $this.find("select").each(function() {
                        const $this = $(this);
                        init_select2($this, null, '#exampleModalSizeSm2');
                    });
                });

            }




            // La fonction qui ajoute un formulaire Categorie
            function addLine($container, name, proto_class) {
                // Dans le contenu de l'attribut « data-prototype », on remplace :
                // - le texte "__name__label__" qu'il contient par le label du champ
                // - le texte "__name__" qu'il contient par le numéro du champ

                var $prototype = $($(proto_class).attr('data-prototype')
                    .replace(new RegExp(name + 'label__', 'g'), 'Colonne ' + (index+1))
                    .replace(new RegExp(name, 'g'), index));


                init_select2($prototype.find('select'), null, '#exampleModalSizeSm2');


                // On ajoute au prototype un lien pour pouvoir supprimer la prestation
                addDeleteLink($prototype, name);
                // On ajoute le prototype modifié à la fin de la balise <div>
                $container.append($prototype);

                index++;
            }


            function addDeleteLink($prototype, name = null) {
                // Création du lien
                $deleteLink = $('<a href="#" class="btn btn-danger btn-xs"><span class="fa fa-trash"></span></a>');
                // Ajout du lien
                $prototype.find(".del-col").append($deleteLink);



                // Ajout du listener sur le clic du lien
                $deleteLink.click(function(e) {
                    const $this = $(this);
                    const $parent = $this.closest($this.parent('div').attr('data-parent'));

                    //console.log($(this).attr('data-parent'), $(this));
                    $parent.remove();

                    if (index > 0) {
                        index -= 1;
                    }

                    e.preventDefault(); // évite qu'un # apparaisse dans l'URL
                });
            }


            $(document).on('select2:select', '.select-type', function (e) {
                const $this = $(this);
                let field_str = $this.find('option:selected').attr('data-require-fields');
                const $parent = $this.closest('.row-colonne');
                let fields = [];
                if (typeof field_str != 'undefined') {
                    fields = field_str.split(',');
                    for (let field of fields ) {
                        $parent.find('.' + field).removeClass('d-none');
                    }
                } else {
                    $parent.find('.source,.valeurs').addClass('d-none');
                }
            });
        })

    </script>
{% endblock %}